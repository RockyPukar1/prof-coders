function
-> group of code, given a name, specific job
-> call/invoke to execute/run
-> call be called as many number of times
-> and from anywhere if the function is already seen

# Parameters:
-> placeholder for value

# arguments
-> value given when function called

# return
-> what the function gives back when called
-> only one value can be returned

# Built-in function
-> print("Hello"), input(), int(), range()
# User defined function
-> sum(), multi()

// function definition
def <function_name>(<parameters>):
  // code

// call/invoke
<function_name>(arguments)

// avoid these things in function
1. Circular dependency
def one():
  print(1)
  two()

def two():
  print(2)
  three()

def three():
  print(3)
  four()

def four():
  print(4)
  five()

def five():
  print(5)
  five()

one()

2. Recursion, with ending condition


#
def sum(a, b):
  print("sum function called")
  return a + b

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))

#
sum1 = sum(num1, num2)

num3 = int(input("Enter third number: "))
num4 = int(input("Enter second number: "))

#
sum2 = sum(num3, num4)

num5 = int(input("Enter fifth number: "))
num6 = int(input("Enter sixth number: "))

#
sum3 = sum(num5, num6)

num7 = int(input("Enter seventh number: "))
num8 = int(input("Enter eight number: "))

#
sum4 = sum(num7, num8)

total = sum(sum1, sum2)
total = sum(total, sum3)
total = sum(total, sum4)

# total = sum(sum1, sum2)
# total += sum(sum3, sum4)
print(total)

set_a = {4, 5, 11, 5, 13}
set_b = {5, 11, 16, 17}
set_c = {15, 16, 18}

class SetOperation:
  def find_intersection(self, *arg):
    print(arg)
    match len(arg):
      case 2:
        for i in range(10): # earth (15000)
          star = ""
          for _ in range(i):
            star += " *"
          print(star)
      case 3:
        print("three")

result = SetOperation()
result.find_intersection(set_a, set_b)
# result.find_intersection(set_a, set_b, set_c)
# *
# * *
# * * *
--------------------------------------
items = ["apple", "banana", "apple", "orange", "banana", "apple"]

items_count = {}
# find count of each number
for current_item in items:
  if current_item in items_count:
    continue
  count = 0
  for searching_item in items:
    if current_item == searching_item:
      count += 1
  items_count[current_item] = count


print(items_count)
-------------------------------------